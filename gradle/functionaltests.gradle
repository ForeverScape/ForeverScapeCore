#! groovy

ext.localDrivers = ["firefox", "chrome"]
ext.remoteFunctionalDrivers = ["chromeWin7"]
ext.remoteRegressionDrivers = []

private void setCommonVars(driver, name, testReportDir, testResultsDir, systemProperty) {
    testReportDir = reporting.file("$name/tests")
    testResultsDir = file("$buildDir/test-results/$name")

    systemProperty.put( "geb.build.reportsDir", reporting.file( "$name/geb"))
    systemProperty.put "geb.env", driver
    systemProperty.put "webdriver.chrome.driver", "src\\test\\resources\\WebDrivers\\chromedriver\\chromedriver.exe"
    systemProperty.put "webdriver.ie.driver", "src\\test\\resources\\WebDrivers\\iedriver\\IEDriverServer.exe"
    // If you wanted to set the baseUrl in your build
    systemProperty.put "geb.build.baseUrl", "$gebBuildBaseUrl"
}

localDrivers.each { driver ->
    task "${driver}Test"(type: Test) {
        setCommonVars(driver, name, testReportDir, testResultsDir, getSystemProperties() )
        maxParallelForks = 4
    }
}

remoteFunctionalDrivers.each { remoteDriver ->
    task "${remoteDriver}Test"(type: Test) {
        // exclude '**/regressionspecs/**'

        testReportDir = reporting.file("$name/tests")
        testResultsDir = file("$buildDir/test-results/$name")

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", remoteDriver
        systemProperty "env", "dev"
        systemProperty "geb.build.baseUrl", "$gebBuildBaseUrl"
        maxParallelForks = 3
    }
}

remoteRegressionDrivers.each { remoteDriver ->
    task "${remoteDriver}Test"(type: Test) {
        // exclude '**/regressionspecs/**'

        testReportDir = reporting.file("$name/tests")
        testResultsDir = file("$buildDir/test-results/$name")

        systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
        systemProperty "geb.env", remoteDriver
        systemProperty "env", "qa"
        systemProperty "geb.build.baseUrl", "$gebBuildBaseUrl"
        maxParallelForks = 3
    }
}

task functionalTest(overwrite: true, dependsOn: localDrivers.collect { tasks["${it}Test"] })
task remoteFunctionalTest(overwrite: true, dependsOn: remoteFunctionalDrivers.collect { tasks["${it}Test"] })
task remoteRegressionTest(overwrite: true, dependsOn: remoteRegressionDrivers.collect { tasks["${it}Test"] })


